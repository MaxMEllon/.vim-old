#===========================================================
# for
#===========================================================
snippet     for
abbr        for () {}
  for ( ${1} = 0; $1 < ${2}; $1++ ) { ${0:TARGET} }

snippet     for2
abbr        for2 () {}
  for ( ${1} = 0; $1 < ${2}; $1++ ) {
    ${0:TARGET}
  }

#===========================================================
# while
#===========================================================
snippet     while
abbr        while () {}
  while ( ${1:#:condition} ) {
    ${0:TARGET}
  }

#===========================================================
# do_while
#===========================================================
snippet     do_while
abbr        do
  do {
    ${0:TARGET:code}
  } while ( ${1:#:condition} );

#===========================================================
# if
#===========================================================
snippet     if
abbr        if () {}
  if ( ${1:#:condition} ) { ${0:TARGET} }

snippet     if2
abbr        if2 () {}
  if ( ${1:#:condition} ) {
    ${0:TARGET}
  }

snippet     ifelse
abbr        if () {} else {}
  if ( ${1:#:condition} ) { ${2:TARGET} } else { ${3} }

snippet     ifelse2
abbr        if2 () {} else {}
  if ( ${1:#:condition} ) {
    ${2:TARGET}
  } else {
    ${3}
  }

#===========================================================
# switch
#===========================================================
snippet     switch
abbr        switch () {}
  switch ( ${1:#:var} ) {
    case ${2:#:val} : ${0:TARGET} break;
  }

#===========================================================
# struct
#===========================================================
snippet     struct
abbr        struct {}
  struct ${1:#:name} {
    ${0:TARGET:data}
  };

snippet     struct_typedef
abbr        typedef struct {}
  typedef struct ${1:#:base_name} {
    ${0:TARGET:data}
  } ${2:#:custom_name};

#===========================================================
# scanf
#===========================================================
snippet     scanf
abbr        scanf("...", &...);
  scanf("${1}", ${2});

snippet     sscanf
abbr        sscanf(..., "...", &...);
  sscanf(${1:#:str_pointer}, "${2}", ${3});

snippet     fscanf
abbr        fscanf(..., "...", &...);
  fscanf(${1:#:file_pointer}, "${2}", ${3});

#===========================================================
# printf
#===========================================================
snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n", ${3});

#===========================================================
# fgets
#===========================================================
snippet     fgets
abbr        fgets(..., ..., ...)
  fgets(${1:#:str_pointer}, ${2:#:len}, ${3:stdin});

#===========================================================
# alloc
#===========================================================
snippet     malloc
abbr        malloc
  (${1}*)malloc(sizeof($1)*${2});

#===========================================================
# function
#===========================================================
snippet     function
alias       func
abbr        func() {}
    ${1:void} ${2:#:func_name}(${3:#:args})
    {
      ${0:TARGET}
    }

#===========================================================
# comment
#===========================================================
snippet comment
alias /*
    /* ${1:#:comment} //*/
    ${0}

#===========================================================
# main
# hard-tab is necessary; C indent doesn't support this.
#===========================================================
snippet main
	int main(void)
	{
		${0:TARGET}
		return 0;
	}

snippet main2
	int main(int argc, char *argv[])
	{
		${0:TARGET}
		return 0;
	}


